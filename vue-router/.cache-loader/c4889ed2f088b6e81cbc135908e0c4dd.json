{"remainingRequest":"/Users/web/Documents/workspace/gzh/gzhLearn/designPattern/vue-router/node_modules/babel-loader/lib/index.js!/Users/web/Documents/workspace/gzh/gzhLearn/designPattern/vue-router/src/router/vue-router.js","dependencies":[{"path":"/Users/web/Documents/workspace/gzh/gzhLearn/designPattern/vue-router/src/router/vue-router.js","mtime":1623059447529},{"path":"/Users/web/Documents/workspace/gzh/gzhLearn/designPattern/vue-router/.babelrc","mtime":1560786629885},{"path":"/Users/web/Documents/workspace/gzh/gzhLearn/designPattern/vue-router/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/web/Documents/workspace/gzh/gzhLearn/designPattern/vue-router/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport HashHistory from './history/hash';\nimport BrowereHistory from './history/history';\nimport { createMatcher } from './match';\n\nvar VueRouter =\n/*#__PURE__*/\nfunction () {\n  function VueRouter(options) {\n    _classCallCheck(this, VueRouter);\n\n    this.options = options;\n    this.mode = options.mode || 'hash';\n    this.routes = options.routes || []; // 构建映射表  ->  二级路有 不带有 /  因为这时 手动添加了  /\n\n    this.matcher = createMatcher(this.routes); // debugger\n\n    this.history = this.mode === 'hash' ? new HashHistory(this) : new BrowereHistory(this); // this.init(this)\n\n    this.beforeEachHooks = [];\n  } // 初始化渲染\n\n\n  _createClass(VueRouter, [{\n    key: \"init\",\n    value: function init(app) {\n      var history = this.history; // 跳转之后，再去监听 hash 变化\n\n      var setupHashListener = function setupHashListener() {\n        history.setupListener(); // 监听 hash 变化\n      }; // history.getCurrentLocation() 拿到当前路径\n\n\n      history.transitionTo(history.getCurrentLocation(), setupHashListener);\n      history.listen(function (route) {\n        app._route = route;\n      });\n    }\n  }, {\n    key: \"match\",\n    value: function match(location) {\n      console.log(location, 'location');\n      return this.matcher.match(location);\n    }\n  }, {\n    key: \"push\",\n    value: function push(location) {\n      this.history.push(location);\n    }\n  }, {\n    key: \"beforeEach\",\n    value: function beforeEach(fn) {\n      // to,form, next\n      this.beforeEachHooks.push(fn);\n    }\n  }]);\n\n  return VueRouter;\n}(); // 使用vue.use()  会调用install 方法\n\n\nVueRouter.install = function (Vue) {\n  // 每个组件都有 this.$router 和 this.$route\n  Vue.mixin({\n    beforeCreate: function beforeCreate() {\n      // debugger\n      // vue组件渲染顺序 ->  先序深度遍历 渲染\n      if (this.$options && this.$options.router) {\n        //根组件\n        this._routerRoot = this;\n        this._router = this.$options && this.$options.router; // console.log(this._router.history,'this.$router')\n        // 深度监控 (服务于  router-view的current)\n        // return { path: 'xxx', machted: [] }\n\n        Vue.util.defineReactive(this, '_route', this._router.history.current); // console.log(this._route, 'this._route')\n\n        this._router.init(this);\n      } else {\n        // 深度先续遍历\n        this._routerRoot = this.$parent && this.$parent._routerRoot;\n      }\n\n      Object.defineProperty(this, '$router', {\n        get: function get() {\n          // 唯一的路由实列 得到 VueRouter 的实列(所以 this.$router 有go方法)\n          return this._routerRoot._router;\n        }\n      });\n      Object.defineProperty(this, '$route', {\n        get: function get() {\n          // this._root._router.history 是 HistoryRoute 的实列\n          return this._routerRoot._route;\n        }\n      });\n    }\n  });\n  Vue.component('router-link', {\n    props: {\n      to: String,\n      tag: {\n        \"default\": 'a',\n        type: String\n      }\n    },\n    methods: {\n      handleClick: function handleClick() {\n        this.$router.push(this.to);\n      }\n    },\n    render: function render(h) {\n      var mode = this._self._routerRoot._router.mode;\n      var Tag = this.tag;\n      return h(Tag, {\n        on: {\n          \"click\": this.handleClick\n        },\n        attrs: {\n          href: mode === 'hash' ? \"#\".concat(this.to) : this.to\n        }\n      }, [this.$slots[\"default\"]]);\n    }\n  });\n  Vue.component('router-view', {\n    // this._self 当前的组件\n    // render 方法 里面的 this_self 指向 组件\n    // this._self._root 指向 根组件\n    // this._self._root._router 指向 根组件的 HistoryRoute 实例\n    functional: true,\n    render: function render(h, _ref) {\n      var data = _ref.data,\n          parent = _ref.parent;\n      var route = parent.$route;\n      var depth = 0;\n      var records = route.machted;\n      data.routerView = true; // debugger\n\n      console.log(data, 'parent');\n\n      while (parent) {\n        // console.log(parent)\n        if (parent.$vnode && parent.$vnode.data.routerView) {\n          depth++;\n        }\n\n        parent = parent.$parent;\n      }\n\n      var record = records[depth];\n\n      if (!record) {\n        return h();\n      } // console.log(record, 'record',records)\n\n\n      return h(record.component, data);\n    }\n  });\n};\n\nexport default VueRouter;",{"version":3,"sources":["/Users/web/Documents/workspace/gzh/gzhLearn/designPattern/vue-router/src/router/vue-router.js"],"names":["HashHistory","BrowereHistory","createMatcher","VueRouter","options","mode","routes","matcher","history","beforeEachHooks","app","setupHashListener","setupListener","transitionTo","getCurrentLocation","listen","route","_route","location","console","log","match","push","fn","install","Vue","mixin","beforeCreate","$options","router","_routerRoot","_router","util","defineReactive","current","init","$parent","Object","defineProperty","get","component","props","to","String","tag","type","methods","handleClick","$router","render","h","_self","Tag","$slots","functional","data","parent","$route","depth","records","machted","routerView","$vnode","record"],"mappings":"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","sourcesContent":["import HashHistory from './history/hash';\nimport BrowereHistory from './history/history';\nimport { createMatcher } from './match';\n\nclass VueRouter{\n    constructor(options){\n        this.options = options\n        this.mode = options.mode || 'hash'\n        this.routes = options.routes || []\n\n        // 构建映射表  ->  二级路有 不带有 /  因为这时 手动添加了  /\n        this.matcher = createMatcher(this.routes)\n        // debugger\n\n        this.history = this.mode === 'hash' ? new HashHistory(this) : new BrowereHistory(this);\n        // this.init(this)\n\n        this.beforeEachHooks = [];\n    }\n\n    // 初始化渲染\n    init(app){\n        const history = this.history;\n\n        // 跳转之后，再去监听 hash 变化\n        const setupHashListener = () => {\n            history.setupListener();// 监听 hash 变化\n        }\n\n        // history.getCurrentLocation() 拿到当前路径\n        history.transitionTo(history.getCurrentLocation(), setupHashListener);\n        history.listen((route) => {\n            app._route = route;\n        })\n    }\n\n    match(location){\n        console.log(location, 'location')\n        return this.matcher.match(location)\n    }\n\n    push(location){\n        this.history.push(location)\n    }\n\n    beforeEach(fn){\n        // to,form, next\n        this.beforeEachHooks.push(fn)\n    }\n}\n\n // 使用vue.use()  会调用install 方法\n VueRouter.install = function(Vue){\n    // 每个组件都有 this.$router 和 this.$route\n    Vue.mixin({\n        beforeCreate(){\n            // debugger\n            // vue组件渲染顺序 ->  先序深度遍历 渲染\n            if(this.$options && this.$options.router){ //根组件\n                this._routerRoot = this\n                this._router = this.$options && this.$options.router\n\n                // console.log(this._router.history,'this.$router')\n                // 深度监控 (服务于  router-view的current)\n                // return { path: 'xxx', machted: [] }\n                Vue.util.defineReactive(this,'_route',this._router.history.current)\n                // console.log(this._route, 'this._route')\n\n                this._router.init(this)\n            }else{\n                // 深度先续遍历\n                this._routerRoot = this.$parent && this.$parent._routerRoot\n            }\n\n            Object.defineProperty(this,'$router',{\n                get(){\n                    // 唯一的路由实列 得到 VueRouter 的实列(所以 this.$router 有go方法)\n                    return this._routerRoot._router\n                }\n            })\n\n            Object.defineProperty(this,'$route',{\n                get(){\n                    // this._root._router.history 是 HistoryRoute 的实列\n                    return this._routerRoot._route\n                }\n            })\n        }\n    })\n\n    Vue.component('router-link',{\n        props: {\n            to: String,\n            tag: {\n                default: 'a',\n                type: String\n            }\n        },\n        methods: {\n            handleClick(){\n                this.$router.push(this.to);\n            }\n        },\n        render(h){\n            let mode = this._self._routerRoot._router.mode\n            let Tag = this.tag\n            return (<Tag on-click={this.handleClick}  href={mode === 'hash' ? `#${this.to}`: this.to}>{this.$slots.default}</Tag>)\n        }\n    })\n\n    Vue.component('router-view',{\n        // this._self 当前的组件\n        // render 方法 里面的 this_self 指向 组件\n        // this._self._root 指向 根组件\n        // this._self._root._router 指向 根组件的 HistoryRoute 实例\n        functional: true,\n        render(h, { data, parent }){\n            let route = parent.$route\n            let depth = 0;\n            let records = route.machted\n            data.routerView = true\n            // debugger\n\n            console.log(data, 'parent')\n\n            while(parent){\n                // console.log(parent)\n                if(parent.$vnode && parent.$vnode.data.routerView){\n                    \n                    depth++\n                }\n                parent = parent.$parent\n            }\n\n            let record = records[depth]\n            if(!record){\n                return h();\n            }\n            // console.log(record, 'record',records)\n            return h(record.component,data)\n        }\n    })\n }\n\n export default VueRouter"]}]}